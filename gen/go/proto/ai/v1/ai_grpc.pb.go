// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/ai/v1/ai.proto

package aiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIServiceClient interface {
	Chat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (AIService_ChatClient, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) Chat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (AIService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[0], "/ai.v1.AIService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &aIServiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AIService_ChatClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type aIServiceChatClient struct {
	grpc.ClientStream
}

func (x *aIServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility
type AIServiceServer interface {
	Chat(*CreateChatRequest, AIService_ChatServer) error
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAIServiceServer struct {
}

func (UnimplementedAIServiceServer) Chat(*CreateChatRequest, AIService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).Chat(m, &aIServiceChatServer{stream})
}

type AIService_ChatServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type aIServiceChatServer struct {
	grpc.ServerStream
}

func (x *aIServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.v1.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _AIService_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ai/v1/ai.proto",
}
