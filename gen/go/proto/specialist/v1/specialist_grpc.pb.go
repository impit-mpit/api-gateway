// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/specialist/v1/specialist.proto

package specialistv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpecialistServiceClient is the client API for SpecialistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecialistServiceClient interface {
	CreateSpecialist(ctx context.Context, in *CreateSpecialistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSpecialist(ctx context.Context, in *DeleteSpecialistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSpecialist(ctx context.Context, in *UpdateSpecialistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSpecialistFeed(ctx context.Context, in *GetSpecialistFeedRequest, opts ...grpc.CallOption) (*GetSpecialistFeedResponse, error)
	GetSpecialistById(ctx context.Context, in *GetSpecialistByIdRequest, opts ...grpc.CallOption) (*Specialist, error)
}

type specialistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecialistServiceClient(cc grpc.ClientConnInterface) SpecialistServiceClient {
	return &specialistServiceClient{cc}
}

func (c *specialistServiceClient) CreateSpecialist(ctx context.Context, in *CreateSpecialistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/specialist.v1.SpecialistService/CreateSpecialist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialistServiceClient) DeleteSpecialist(ctx context.Context, in *DeleteSpecialistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/specialist.v1.SpecialistService/DeleteSpecialist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialistServiceClient) UpdateSpecialist(ctx context.Context, in *UpdateSpecialistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/specialist.v1.SpecialistService/UpdateSpecialist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialistServiceClient) GetSpecialistFeed(ctx context.Context, in *GetSpecialistFeedRequest, opts ...grpc.CallOption) (*GetSpecialistFeedResponse, error) {
	out := new(GetSpecialistFeedResponse)
	err := c.cc.Invoke(ctx, "/specialist.v1.SpecialistService/GetSpecialistFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialistServiceClient) GetSpecialistById(ctx context.Context, in *GetSpecialistByIdRequest, opts ...grpc.CallOption) (*Specialist, error) {
	out := new(Specialist)
	err := c.cc.Invoke(ctx, "/specialist.v1.SpecialistService/GetSpecialistById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecialistServiceServer is the server API for SpecialistService service.
// All implementations must embed UnimplementedSpecialistServiceServer
// for forward compatibility
type SpecialistServiceServer interface {
	CreateSpecialist(context.Context, *CreateSpecialistRequest) (*emptypb.Empty, error)
	DeleteSpecialist(context.Context, *DeleteSpecialistRequest) (*emptypb.Empty, error)
	UpdateSpecialist(context.Context, *UpdateSpecialistRequest) (*emptypb.Empty, error)
	GetSpecialistFeed(context.Context, *GetSpecialistFeedRequest) (*GetSpecialistFeedResponse, error)
	GetSpecialistById(context.Context, *GetSpecialistByIdRequest) (*Specialist, error)
	mustEmbedUnimplementedSpecialistServiceServer()
}

// UnimplementedSpecialistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpecialistServiceServer struct {
}

func (UnimplementedSpecialistServiceServer) CreateSpecialist(context.Context, *CreateSpecialistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecialist not implemented")
}
func (UnimplementedSpecialistServiceServer) DeleteSpecialist(context.Context, *DeleteSpecialistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecialist not implemented")
}
func (UnimplementedSpecialistServiceServer) UpdateSpecialist(context.Context, *UpdateSpecialistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecialist not implemented")
}
func (UnimplementedSpecialistServiceServer) GetSpecialistFeed(context.Context, *GetSpecialistFeedRequest) (*GetSpecialistFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialistFeed not implemented")
}
func (UnimplementedSpecialistServiceServer) GetSpecialistById(context.Context, *GetSpecialistByIdRequest) (*Specialist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialistById not implemented")
}
func (UnimplementedSpecialistServiceServer) mustEmbedUnimplementedSpecialistServiceServer() {}

// UnsafeSpecialistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecialistServiceServer will
// result in compilation errors.
type UnsafeSpecialistServiceServer interface {
	mustEmbedUnimplementedSpecialistServiceServer()
}

func RegisterSpecialistServiceServer(s grpc.ServiceRegistrar, srv SpecialistServiceServer) {
	s.RegisterService(&SpecialistService_ServiceDesc, srv)
}

func _SpecialistService_CreateSpecialist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecialistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistServiceServer).CreateSpecialist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specialist.v1.SpecialistService/CreateSpecialist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistServiceServer).CreateSpecialist(ctx, req.(*CreateSpecialistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialistService_DeleteSpecialist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpecialistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistServiceServer).DeleteSpecialist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specialist.v1.SpecialistService/DeleteSpecialist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistServiceServer).DeleteSpecialist(ctx, req.(*DeleteSpecialistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialistService_UpdateSpecialist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecialistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistServiceServer).UpdateSpecialist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specialist.v1.SpecialistService/UpdateSpecialist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistServiceServer).UpdateSpecialist(ctx, req.(*UpdateSpecialistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialistService_GetSpecialistFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialistFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistServiceServer).GetSpecialistFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specialist.v1.SpecialistService/GetSpecialistFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistServiceServer).GetSpecialistFeed(ctx, req.(*GetSpecialistFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialistService_GetSpecialistById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialistByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistServiceServer).GetSpecialistById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specialist.v1.SpecialistService/GetSpecialistById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistServiceServer).GetSpecialistById(ctx, req.(*GetSpecialistByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpecialistService_ServiceDesc is the grpc.ServiceDesc for SpecialistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpecialistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "specialist.v1.SpecialistService",
	HandlerType: (*SpecialistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpecialist",
			Handler:    _SpecialistService_CreateSpecialist_Handler,
		},
		{
			MethodName: "DeleteSpecialist",
			Handler:    _SpecialistService_DeleteSpecialist_Handler,
		},
		{
			MethodName: "UpdateSpecialist",
			Handler:    _SpecialistService_UpdateSpecialist_Handler,
		},
		{
			MethodName: "GetSpecialistFeed",
			Handler:    _SpecialistService_GetSpecialistFeed_Handler,
		},
		{
			MethodName: "GetSpecialistById",
			Handler:    _SpecialistService_GetSpecialistById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/specialist/v1/specialist.proto",
}
